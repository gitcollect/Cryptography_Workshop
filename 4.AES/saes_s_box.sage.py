# This file was *autogenerated* from the file saes_s_box.sage
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_0xff = Integer(0xff); _sage_const_4 = Integer(4); _sage_const_0x80 = Integer(0x80); _sage_const_8 = Integer(8); _sage_const_0x30 = Integer(0x30); _sage_const_0xff00 = Integer(0xff00); _sage_const_0x4af5 = Integer(0x4af5)#!/usr/bin/env sage

def string2blist(s):
    return(map(int, list(s)))

def int2blist(n, length):
    b = bin(n)
    l = string2blist(b[_sage_const_2 :])
    return([_sage_const_0 ]*(length-len(l)) + l)

def test():
	L = GF(_sage_const_2 **_sage_const_4 , names=('a',)); (a,) = L._first_ngens(1)
	V = VectorSpace(GF(_sage_const_2 ),_sage_const_4 )
	m = Matrix(L,
			   [ [_sage_const_1 , _sage_const_0 , _sage_const_1 , _sage_const_1 ]
			   , [_sage_const_1 , _sage_const_1 , _sage_const_0 , _sage_const_1 ]
			   , [_sage_const_1 , _sage_const_1 , _sage_const_1 , _sage_const_0 ]
			   , [_sage_const_0 , _sage_const_1 , _sage_const_1 , _sage_const_1 ]
			   ])
	a = V([_sage_const_1 , _sage_const_0 , _sage_const_0 , _sage_const_1 ])
	print "in   out"
	for b0 in xrange(_sage_const_0 ,_sage_const_2 ):
		for b1 in xrange(_sage_const_0 ,_sage_const_2 ):
			for b2 in xrange(_sage_const_0 ,_sage_const_2 ):
				for b3 in xrange(_sage_const_0 ,_sage_const_2 ):
					sbox_in = [b0,b1,b2,b3]
					# [0,0,0,0] is a special case.
					if sbox_in == [_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ]:
						sbox_out = [_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ]
					else:
						b = \
						  V(int2blist((~L([b3,b2,b1,b0])).integer_representation(),
									  _sage_const_4 ))
						sbox_out = list(m*b+a)
					print sbox_in,
					print " ",
					print sbox_out
					
def sbox(nib):
	b0 = nib[_sage_const_0 ]
	b1 = nib[_sage_const_1 ]
	b2 = nib[_sage_const_2 ]
	b3 = nib[_sage_const_3 ]
	
	L = GF(_sage_const_2 **_sage_const_4 , names=('a',)); (a,) = L._first_ngens(1)
	V = VectorSpace(GF(_sage_const_2 ),_sage_const_4 )
	m = Matrix(L,
			   [ [_sage_const_1 , _sage_const_0 , _sage_const_1 , _sage_const_1 ]
			   , [_sage_const_1 , _sage_const_1 , _sage_const_0 , _sage_const_1 ]
			   , [_sage_const_1 , _sage_const_1 , _sage_const_1 , _sage_const_0 ]
			   , [_sage_const_0 , _sage_const_1 , _sage_const_1 , _sage_const_1 ]
			   ])
	a = V([_sage_const_1 , _sage_const_0 , _sage_const_0 , _sage_const_1 ])

	sbox_in = [b0,b1,b2,b3]
	
	# [0,0,0,0] is a special case.
	if sbox_in == [_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ]:
		sbox_out = [_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ]
	else:
		b = \
		  V(int2blist((~L([b3,b2,b1,b0])).integer_representation(),
					  _sage_const_4 ))
		sbox_out = list(m*b+a)
	return sbox_out

# 8 Bit Nibble. 
def rotNib(nib):
	# Die 4 ersten Bits und die 4 zweiten Bits tauschen!
	return nib[_sage_const_4 :] + nib[:_sage_const_4 ]
	

# 8 Bit Nibble.
def subNib(nib):
	#return wrapper(nib)
	return sbox(nib[:_sage_const_4 ]) + sbox(nib[_sage_const_4 :])
		
def xor(a, b):
    def h(x,y):
        if(x==y):
            return(_sage_const_0 )
        else:
            return(_sage_const_1 )
    return(map(lambda (x, y): h(x,y), zip(a, b)))

def generateKeys(key):
	keys = []
	# 16bit-Key splitten in w0, w1:
	w0 = int2blist((key & _sage_const_0xff00 ) >> _sage_const_8 , _sage_const_8 )
	w1 = int2blist(key & _sage_const_0xff , _sage_const_8 )
	
	#print "w0 : "  +str(w0)
	#print "w1 : " + str(w1)
	
	w2 = xor(w0, xor(int2blist(_sage_const_0x80 , _sage_const_8 ), subNib(rotNib(w1))))
	
	#print "w2 : " + str(w2)
	
	w3 = xor(w2, w1)
	
	#print "w3 : " + str(w3)
	
	w4 = xor(w2, xor(int2blist(_sage_const_0x30 , _sage_const_8 ), subNib(rotNib(w3))))
	
	#print "w4 : " + str(w4)
	
	w5 = xor(w4, w3)
	
	#print "w5 : " + str(w5)
	
	keys.append(w0+w1)
	keys.append(w2+w3)
	keys.append(w4+w5)
	
	
	return keys
	
	
	
print generateKeys(_sage_const_0x4af5 )
